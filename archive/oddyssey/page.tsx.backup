"use client";

import Button from "@/components/button";
import { motion, AnimatePresence } from "framer-motion";
import { useState, useEffect } from "react";
import { 
  FireIcon, 
  TrophyIcon, 
  ChartBarIcon, 
  CurrencyDollarIcon,
  UsersIcon,
  BoltIcon,
  SparklesIcon,
  ClockIcon,
  StarIcon,
  EyeIcon,
  ShieldCheckIcon,
  CheckCircleIcon
} from "@heroicons/react/24/outline";

interface Pick {
  id: number;
  time: string;
  match: string;
  pick: "odds1" | "oddsX" | "odds2" | "over" | "under";
  odd: number;
}

const matches = [
  {
    id: 1,
    time: "10:00",
    team1: "SK Poltava",
    team2: "Metalist",
    odds1: 2.75,
    oddsX: 3.02,
    odds2: 2.4,
    over: 1.85,
    under: 2.0,
  },
  {
    id: 2,
    time: "12:15",
    team1: "Al Najma",
    team2: "Alhazm",
    odds1: 3.2,
    oddsX: 3.2,
    odds2: 2.35,
    over: 2.1,
    under: 1.8,
  },
  {
    id: 3,
    time: "17:30",
    team1: "Empoli",
    team2: "Udinese",
    odds1: 2.78,
    oddsX: 2.9,
    odds2: 2.88,
    over: 1.95,
    under: 2.1,
  },
  {
    id: 4,
    time: "19:45",
    team1: "Venezia",
    team2: "Lecce",
    odds1: 2.8,
    oddsX: 3.25,
    odds2: 3.25,
    over: 2.0,
    under: 1.85,
  },
  {
    id: 5,
    time: "14:30",
    team1: "Arsenal",
    team2: "Liverpool",
    odds1: 2.45,
    oddsX: 3.40,
    odds2: 2.90,
    over: 1.75,
    under: 2.15,
  },
  {
    id: 6,
    time: "16:00",
    team1: "Barcelona",
    team2: "Real Madrid",
    odds1: 2.10,
    oddsX: 3.50,
    odds2: 3.20,
    over: 1.65,
    under: 2.30,
  },
  {
    id: 7,
    time: "20:15",
    team1: "PSG",
    team2: "Bayern Munich",
    odds1: 2.60,
    oddsX: 3.30,
    odds2: 2.70,
    over: 1.70,
    under: 2.20,
  },
  {
    id: 8,
    time: "13:45",
    team1: "Manchester City",
    team2: "Chelsea",
    odds1: 1.95,
    oddsX: 3.60,
    odds2: 3.80,
    over: 1.60,
    under: 2.40,
  },
  {
    id: 9,
    time: "15:30",
    team1: "Juventus",
    team2: "AC Milan",
    odds1: 2.30,
    oddsX: 3.20,
    odds2: 3.10,
    over: 1.80,
    under: 2.10,
  },
  {
    id: 10,
    time: "18:00",
    team1: "Atletico Madrid",
    team2: "Sevilla",
    odds1: 2.15,
    oddsX: 3.10,
    odds2: 3.50,
    over: 1.90,
    under: 2.05,
  },
];

const statsData = [
  {
    title: "Total Prize Pool",
    value: "2,450 ETH",
    subtitle: "Across all slips",
    icon: CurrencyDollarIcon,
    gradient: "from-primary to-blue-500",
    iconColor: "text-primary",
    glowColor: "glow-cyan"
  },
  {
    title: "Active Players",
    value: "8,934",
    subtitle: "Competing today",
    icon: UsersIcon,
    gradient: "from-secondary to-purple-500",
    iconColor: "text-secondary",
    glowColor: "glow-magenta"
  },
  {
    title: "Live Matches",
    value: "10",
    subtitle: "Ready to predict",
    icon: EyeIcon,
    gradient: "from-green-400 to-blue-500",
    iconColor: "text-green-400",
    glowColor: "glow-violet"
  },
];

export default function OddysseyPage() {
  const [picks, setPicks] = useState<Pick[]>([]);
  const [slips, setSlips] = useState<Pick[][]>([]);
  const [activeTab, setActiveTab] = useState<"today" | "slips">("today");
  const [isVisible, setIsVisible] = useState(false);
  const [timeLeft, setTimeLeft] = useState({ hours: 23, minutes: 45, seconds: 30 });
  const [entryFee, setEntryFee] = useState(0.1);
  const [isExpired, setIsExpired] = useState(false);

  useEffect(() => {
    setIsVisible(true);
    
    // Countdown timer
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev.seconds > 0) {
          return { ...prev, seconds: prev.seconds - 1 };
        } else if (prev.minutes > 0) {
          return { ...prev, minutes: prev.minutes - 1, seconds: 59 };
        } else if (prev.hours > 0) {
          return { hours: prev.hours - 1, minutes: 59, seconds: 59 };
        }
        return prev;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const handlePickSelection = (matchId: number, pick: "odds1" | "oddsX" | "odds2" | "over" | "under") => {
    if (isExpired) {
      alert("Betting is closed for today's matches");
      return;
    }
    
    setPicks((prev) => {
      // Remove existing pick for this match
      const filteredPicks = prev.filter(p => p.id !== matchId);
      // Add new pick if it's not the same as the one being removed
      if (!prev.find(p => p.id === matchId && p.pick === pick)) {
        return [
          ...filteredPicks,
          {
            id: matchId,
            time: matches.find(m => m.id === matchId)?.time || "",
            match: matches.find(m => m.id === matchId)?.team1 + " - " + matches.find(m => m.id === matchId)?.team2 || "",
            pick: pick,
            odd: matches.find(m => m.id === matchId)?.[pick] || 0,
          },
        ];
      }
      return filteredPicks;
    });
  };

  const totalOdd = picks.reduce((acc, reducer) => acc * reducer.odd, 1).toFixed(2);
  const calculatePotentialPayout = (userOdds: number) => {
    return (entryFee * userOdds * 0.8).toFixed(2); // 80% of potential winnings
  };

  return (
    <div className="min-h-screen bg-gradient-main">
      <div className="container-nav py-8 space-y-8">
        {/* Hero Section */}
        <motion.div
          initial={{ opacity: 0, y: -30 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center relative"
        >
          {/* Animated background elements */}
          <div className="absolute inset-0 overflow-hidden pointer-events-none">
            <motion.div 
              className="absolute top-[20%] left-[15%] w-6 h-6 bg-primary/20 rounded-full blur-sm"
              animate={{ y: [-10, 10, -10], x: [-5, 5, -5], scale: [1, 1.2, 1] }}
              transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
            />
            <motion.div 
              className="absolute top-[60%] right-[20%] w-4 h-4 bg-secondary/30 rounded-full blur-sm"
              animate={{ y: [10, -10, 10], x: [5, -5, 5], scale: [1, 1.3, 1] }}
              transition={{ duration: 3, repeat: Infinity, ease: "easeInOut", delay: 1 }}
            />
            <motion.div 
              className="absolute bottom-[30%] left-[70%] w-5 h-5 bg-accent/25 rounded-full blur-sm"
              animate={{ y: [-8, 8, -8], x: [-3, 3, -3], scale: [1, 1.1, 1] }}
              transition={{ duration: 5, repeat: Infinity, ease: "easeInOut", delay: 2 }}
            />
          </div>

          <div className="relative z-10 mb-8">
            <div className="flex items-center justify-center gap-6 mb-6">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
              >
                <FireIcon className="h-12 w-12 text-primary" />
              </motion.div>
              <h1 className="text-5xl md:text-6xl font-bold gradient-text">
                ODDYSSEY
              </h1>
              <motion.div
                animate={{ rotate: -360 }}
                transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
              >
                <SparklesIcon className="h-12 w-12 text-secondary" />
              </motion.div>
            </div>
            
            <div className="mx-auto mb-6 h-1 w-64 bg-gradient-somnia rounded-full opacity-60"></div>
            
            <p className="text-xl text-text-secondary max-w-2xl mx-auto">
              The ultimate prediction challenge. Select outcomes for 10 matches, compete with the highest odds, and claim your share of the prize pool.
            </p>
          </div>
        </motion.div>

        {/* Stats Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="grid grid-cols-1 md:grid-cols-3 gap-6"
        >
          {statsData.map((stat, index) => {
            const IconComponent = stat.icon;
            return (
              <motion.div
                key={index}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.1 * index }}
                whileHover={{ scale: 1.02, y: -2 }}
                className={`glass-card text-center bg-gradient-to-br ${stat.gradient}/10 border-2 border-transparent hover:border-white/10 hover:${stat.glowColor} transition-all duration-300`}
              >
                <IconComponent className={`h-12 w-12 mx-auto mb-4 ${stat.iconColor}`} />
                <h3 className="text-2xl font-bold text-text-primary mb-1">{stat.value}</h3>
                <p className="text-lg font-semibold text-text-secondary mb-1">{stat.title}</p>
                <p className="text-sm text-text-muted">{stat.subtitle}</p>
              </motion.div>
            );
          })}
        </motion.div>

        {/* Countdown Timer */}
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
          className="glass-card text-center bg-gradient-to-br from-bg-card/90 to-bg-card/60 border-2 border-primary/20"
        >
          <h3 className="text-xl font-bold text-primary mb-6 flex items-center justify-center gap-2">
            <ClockIcon className="h-6 w-6" />
            Betting Closes In
          </h3>
          {isExpired ? (
            <div className="text-red-400 font-bold text-2xl">
              Betting is closed for today's matches
            </div>
          ) : (
            <div className="flex justify-center gap-4 mb-4">
              <motion.div 
                className="glass-card p-4 min-w-[80px] bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30"
                animate={{ scale: [1, 1.05, 1] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <div className="text-2xl font-bold text-primary">{timeLeft.hours.toString().padStart(2, '0')}</div>
                <div className="text-xs text-text-muted uppercase tracking-wider">Hours</div>
              </motion.div>
              <motion.div 
                className="glass-card p-4 min-w-[80px] bg-gradient-to-br from-secondary/20 to-secondary/5 border border-secondary/30"
                animate={{ scale: [1, 1.05, 1] }}
                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}
              >
                <div className="text-2xl font-bold text-secondary">{timeLeft.minutes.toString().padStart(2, '0')}</div>
                <div className="text-xs text-text-muted uppercase tracking-wider">Minutes</div>
              </motion.div>
              <motion.div 
                className="glass-card p-4 min-w-[80px] bg-gradient-to-br from-accent/20 to-accent/5 border border-accent/30"
                animate={{ scale: [1, 1.05, 1] }}
                transition={{ duration: 2, repeat: Infinity, delay: 1 }}
              >
                <div className="text-2xl font-bold text-accent">{timeLeft.seconds.toString().padStart(2, '0')}</div>
                <div className="text-xs text-text-muted uppercase tracking-wider">Seconds</div>
              </motion.div>
            </div>
          )}
          <p className="text-text-muted">
            {isExpired 
              ? "You can view your existing slips below" 
              : "Make your predictions before the deadline"}
          </p>
        </motion.div>

        {/* How It Works */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="glass-card bg-gradient-to-br from-bg-card/90 to-bg-card/60"
        >
          <h2 className="text-2xl font-bold text-center mb-8 gradient-text">How It Works</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <motion.div
              whileHover={{ scale: 1.02, y: -3 }}
              className="text-center p-6 glass-card bg-gradient-to-br from-primary/10 to-primary/5 border border-primary/20"
            >
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-r from-primary to-blue-500 flex items-center justify-center text-black font-bold text-xl shadow-lg">
                1
              </div>
              <h3 className="text-lg font-semibold text-primary mb-2">Select 10 Matches</h3>
              <p className="text-text-secondary text-sm">Pick outcomes for all 10 matches - moneyline or over/under goals</p>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.02, y: -3 }}
              className="text-center p-6 glass-card bg-gradient-to-br from-secondary/10 to-secondary/5 border border-secondary/20"
            >
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-r from-secondary to-purple-500 flex items-center justify-center text-black font-bold text-xl shadow-lg">
                2
              </div>
              <h3 className="text-lg font-semibold text-secondary mb-2">Compete for Highest Odds</h3>
              <p className="text-text-secondary text-sm">Your combined odds determine your ranking against other players</p>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.02, y: -3 }}
              className="text-center p-6 glass-card bg-gradient-to-br from-accent/10 to-accent/5 border border-accent/20"
            >
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-r from-accent to-green-500 flex items-center justify-center text-black font-bold text-xl shadow-lg">
                3
              </div>
              <h3 className="text-lg font-semibold text-accent mb-2">Win Big Rewards</h3>
              <p className="text-text-secondary text-sm">Top performers share the prize pool based on their rankings</p>
            </motion.div>
          </div>
        </motion.div>

        {/* Tab Navigation */}
        <div className="glass-card p-6 bg-gradient-to-br from-bg-card/90 to-bg-card/60">
          <div className="flex items-center justify-center gap-4">
            <button
              onClick={() => setActiveTab("today")}
              className={`px-8 py-3 rounded-button font-semibold transition-all duration-300 flex items-center gap-2 ${
                activeTab === "today"
                  ? "bg-gradient-primary text-black shadow-lg scale-105"
                  : "text-text-secondary hover:text-text-primary hover:bg-bg-card/50"
              }`}
            >
              <ChartBarIcon className="h-5 w-5" />
              Today's Matches
            </button>
            <button
              onClick={() => setActiveTab("slips")}
              className={`px-8 py-3 rounded-button font-semibold transition-all duration-300 flex items-center gap-2 ${
                activeTab === "slips"
                  ? "bg-gradient-primary text-black shadow-lg scale-105"
                  : "text-text-secondary hover:text-text-primary hover:bg-bg-card/50"
              }`}
            >
              <TrophyIcon className="h-5 w-5" />
              My Slips ({slips.length})
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <AnimatePresence mode="wait">
            {activeTab === "today" ? (
              <>
                {/* Matches Section */}
                <motion.div
                  key="matches"
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 20 }}
                  className="lg:col-span-2"
                >
                  <div className="glass-card bg-gradient-to-br from-bg-card/95 to-bg-card/70">
                    <div className="flex items-center justify-between mb-6">
                      <h2 className="text-2xl font-bold gradient-text">Live Matches</h2>
                      <div className="flex items-center gap-2 text-sm text-text-muted">
                        <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
                        <span>Live Odds</span>
                      </div>
                    </div>

                    <div className="space-y-4">
                      {matches.map((match, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.3, delay: i * 0.05 }}
                          className="glass-card bg-gradient-to-br from-bg-card/80 to-bg-card/50 border border-border-card/50 hover:border-border-card transition-all duration-200"
                        >
                          <div className="flex items-center justify-between mb-4">
                            <div className="flex items-center gap-3">
                              <div className="text-sm text-text-muted font-mono bg-bg-card/50 px-3 py-1 rounded-button">
                                {match.time}
                              </div>
                              <div className="font-semibold text-text-primary text-lg">
                                {match.team1} vs {match.team2}
                              </div>
                            </div>
                          </div>

                          {/* Betting Options - Single Row Layout */}
                          <div className="grid grid-cols-5 gap-3">
                            {/* Home Win */}
                            <button
                              onClick={() => handlePickSelection(match.id, "odds1")}
                              className={`p-4 text-center rounded-button transition-all duration-200 font-semibold ${
                                picks.find(p => p.id === match.id && p.pick === "odds1")
                                  ? "bg-gradient-primary text-black shadow-lg scale-105 border-2 border-primary"
                                  : "bg-bg-card/80 text-primary hover:bg-bg-card hover:scale-105 border border-primary/30 hover:border-primary/60"
                              }`}
                            >
                              <div className="text-xs opacity-80 mb-1">Home Win</div>
                              <div className="font-bold text-lg">{match.odds1}</div>
                            </button>
                            
                            {/* Draw */}
                            <button
                              onClick={() => handlePickSelection(match.id, "oddsX")}
                              className={`p-4 text-center rounded-button transition-all duration-200 font-semibold ${
                                picks.find(p => p.id === match.id && p.pick === "oddsX")
                                  ? "bg-gradient-secondary text-black shadow-lg scale-105 border-2 border-secondary"
                                  : "bg-bg-card/80 text-secondary hover:bg-bg-card hover:scale-105 border border-secondary/30 hover:border-secondary/60"
                              }`}
                            >
                              <div className="text-xs opacity-80 mb-1">Draw</div>
                              <div className="font-bold text-lg">{match.oddsX}</div>
                            </button>
                            
                            {/* Away Win */}
                            <button
                              onClick={() => handlePickSelection(match.id, "odds2")}
                              className={`p-4 text-center rounded-button transition-all duration-200 font-semibold ${
                                picks.find(p => p.id === match.id && p.pick === "odds2")
                                  ? "bg-gradient-to-r from-accent to-green-500 text-black shadow-lg scale-105 border-2 border-accent"
                                  : "bg-bg-card/80 text-accent hover:bg-bg-card hover:scale-105 border border-accent/30 hover:border-accent/60"
                              }`}
                            >
                              <div className="text-xs opacity-80 mb-1">Away Win</div>
                              <div className="font-bold text-lg">{match.odds2}</div>
                            </button>
                            
                            {/* Over 2.5 */}
                            <button
                              onClick={() => handlePickSelection(match.id, "over")}
                              className={`p-4 text-center rounded-button transition-all duration-200 font-semibold ${
                                picks.find(p => p.id === match.id && p.pick === "over")
                                  ? "bg-gradient-to-r from-blue-500 to-primary text-black shadow-lg scale-105 border-2 border-blue-400"
                                  : "bg-bg-card/80 text-blue-400 hover:bg-bg-card hover:scale-105 border border-blue-400/30 hover:border-blue-400/60"
                              }`}
                            >
                              <div className="text-xs opacity-80 mb-1">Over 2.5</div>
                              <div className="font-bold text-lg">{match.over}</div>
                            </button>
                            
                            {/* Under 2.5 */}
                            <button
                              onClick={() => handlePickSelection(match.id, "under")}
                              className={`p-4 text-center rounded-button transition-all duration-200 font-semibold ${
                                picks.find(p => p.id === match.id && p.pick === "under")
                                  ? "bg-gradient-to-r from-purple-500 to-blue-600 text-black shadow-lg scale-105 border-2 border-purple-400"
                                  : "bg-bg-card/70 text-purple-400 hover:bg-bg-card hover:scale-105 border border-purple-400/30 hover:border-purple-400/60"
                              }`}
                            >
                              <div className="text-xs opacity-80 mb-1">Under 2.5</div>
                              <div className="font-bold text-lg">{match.under}</div>
                            </button>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </div>
                </motion.div>

                {/* Slip Builder Sidebar */}
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.3 }}
                  className="lg:col-span-1"
                >
                  <div className="glass-card sticky top-8 bg-gradient-to-br from-bg-card/90 to-bg-card/50">
                    <h3 className="text-xl font-bold gradient-text mb-6 text-center flex items-center justify-center gap-2">
                      <ShieldCheckIcon className="h-6 w-6" />
                      Slip Builder
                    </h3>

                    <AnimatePresence mode="wait">
                      {picks.length > 0 ? (
                        <motion.div
                          key="with-picks"
                          initial={{ opacity: 0, scale: 0.95 }}
                          animate={{ opacity: 1, scale: 1 }}
                          className="space-y-4"
                        >
                          {/* Selection Progress */}
                          <div className="text-center mb-4">
                            <p className={`text-lg font-semibold mb-2 ${picks.length < 10 ? 'text-yellow-400' : 'text-green-400'}`}>
                              {picks.length}/10 selections
                            </p>
                            <div className="w-full bg-bg-card/50 h-3 rounded-full overflow-hidden">
                              <motion.div 
                                className={`h-full transition-all duration-300 ${picks.length === 10 ? 'bg-gradient-to-r from-green-400 to-primary' : 'bg-gradient-to-r from-yellow-400 to-primary'}`}
                                style={{ width: `${(picks.length / 10) * 100}%` }}
                                animate={{ scale: picks.length === 10 ? [1, 1.05, 1] : 1 }}
                                transition={{ duration: 0.5, repeat: picks.length === 10 ? Infinity : 0 }}
                              />
                            </div>
                          </div>

                          {/* Picks List */}
                          <div className="space-y-2 max-h-60 overflow-y-auto">
                            {picks.map((pick, i) => (
                              <div key={i} className="flex items-center justify-between p-3 bg-bg-card/30 rounded-button">
                                <div className="flex-1 min-w-0">
                                  <div className="text-xs text-text-muted truncate">{pick.match}</div>
                                  <div className="flex items-center gap-2">
                                    <span className={`px-2 py-1 rounded text-xs font-bold ${
                                      pick.pick === "odds1" ? "bg-primary text-black" : 
                                      pick.pick === "odds2" ? "bg-accent text-black" : 
                                      pick.pick === "oddsX" ? "bg-secondary text-black" : 
                                      pick.pick === "over" ? "bg-blue-400 text-black" : "bg-purple-400 text-black"
                                    }`}>
                                      {pick.pick}
                                    </span>
                                    <span className="text-primary font-bold">{pick.odd}</span>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>

                          {/* Stats */}
                          <div className="space-y-3 pt-4 border-t border-border-card/30">
                            <div className="flex justify-between items-center">
                              <span className="text-text-muted">Total Odds:</span>
                              <span className="text-primary font-bold text-lg">{totalOdd}x</span>
                            </div>
                            <div className="flex justify-between items-center">
                              <span className="text-text-muted">Entry Fee:</span>
                              <div className="flex items-center gap-2">
                                <input
                                  type="number"
                                  value={entryFee}
                                  onChange={(e) => setEntryFee(Number(e.target.value))}
                                  className="w-20 bg-bg-card/50 border border-border-card rounded-button px-2 py-1 text-text-primary text-sm focus:outline-none focus:ring-2 focus:ring-primary"
                                  step="0.1"
                                  min="0.1"
                                />
                                <span className="text-text-muted text-sm">ETH</span>
                              </div>
                            </div>
                            <div className="flex justify-between items-center">
                              <span className="text-text-muted">Potential Win:</span>
                              <span className="text-secondary font-bold">{calculatePotentialPayout(Number(totalOdd))} ETH</span>
                            </div>
                          </div>

                          {/* Submit Button */}
                          <div className="pt-4">
                            <Button
                              fullWidth
                              variant="primary"
                              size="lg"
                              leftIcon={<BoltIcon className="h-5 w-5" />}
                              onClick={() => {
                                if (isExpired) {
                                  alert("Betting is closed for today's matches");
                                  return;
                                }
                                if (picks.length < 10) {
                                  alert("You need to select all 10 matches");
                                  return;
                                }
                                setSlips([...slips, [...picks]]);
                                setPicks([]);
                                alert("Slip created successfully!");
                              }}
                              disabled={isExpired || picks.length < 10}
                              className={`${picks.length === 10 ? 'animate-pulse' : ''}`}
                            >
                              {isExpired ? "Betting Closed" : picks.length < 10 ? `Select ${10 - picks.length} More` : "Place Bet"}
                            </Button>
                          </div>

                          {picks.length > 0 && (
                            <button
                              onClick={() => setPicks([])}
                              className="w-full text-text-muted hover:text-red-400 transition-colors text-sm pt-2"
                            >
                              Clear All Selections
                            </button>
                          )}
                        </motion.div>
                      ) : (
                        <motion.div
                          key="empty-builder"
                          initial={{ opacity: 0, scale: 0.95 }}
                          animate={{ opacity: 1, scale: 1 }}
                          className="text-center py-8"
                        >
                          <div className="text-6xl mb-4 opacity-50">⚽</div>
                          <h4 className="font-semibold text-text-primary mb-2">Start Building Your Slip</h4>
                          <p className="text-text-muted text-sm mb-4">
                            Click on any odds to add selections to your slip
                          </p>
                          <div className="text-xs text-primary font-medium bg-primary/10 px-3 py-2 rounded-button">
                            You need to select exactly 10 matches
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </motion.div>
              </>
            ) : (
              <motion.div
                key="slips"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className="lg:col-span-3"
              >
                <div className="glass-card bg-gradient-to-br from-bg-card/90 to-bg-card/50">
                  <h2 className="text-2xl font-bold gradient-text mb-6">My Submitted Slips</h2>
                  
                  <AnimatePresence mode="wait">
                    {slips.length > 0 ? (
                      <motion.div
                        key="with-slips"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="space-y-6"
                      >
                        {slips.map((slip, slipIndex) => {
                          const slipTotalOdd = slip.reduce((acc, pick) => acc * pick.odd, 1).toFixed(2);
                          
                          return (
                            <motion.div
                              key={slipIndex}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: slipIndex * 0.1 }}
                              className="glass-card bg-gradient-to-br from-bg-card/60 to-bg-card/30 border border-primary/20 hover:border-primary/40 hover:glow-cyan transition-all duration-300"
                            >
                              <div className="flex justify-between items-center mb-4">
                                <h3 className="text-lg font-bold text-primary flex items-center gap-2">
                                  <CheckCircleIcon className="h-5 w-5" />
                                  Slip #{slipIndex + 1}
                                </h3>
                                <div className="flex items-center gap-4 text-sm">
                                  <span className="text-text-muted">Status: <span className="text-green-400">Active</span></span>
                                  <span className="text-text-muted">Total Odds: <span className="text-primary font-bold">{slipTotalOdd}x</span></span>
                                </div>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-2">
                                {slip.map((pick, i) => (
                                  <div key={i} className="bg-bg-card/30 p-3 rounded-button">
                                    <div className="text-xs text-text-muted mb-1">{pick.time}</div>
                                    <div className="text-xs text-text-primary font-medium mb-2 line-clamp-2">{pick.match}</div>
                                    <div className="flex items-center justify-between">
                                      <span className={`px-2 py-1 rounded text-xs font-bold ${
                                        pick.pick === "odds1" ? "bg-primary text-black" : 
                                        pick.pick === "odds2" ? "bg-accent text-black" : 
                                        pick.pick === "oddsX" ? "bg-secondary text-black" : 
                                        pick.pick === "over" ? "bg-blue-400 text-black" : "bg-purple-400 text-black"
                                      }`}>
                                        {pick.pick}
                                      </span>
                                      <span className="text-primary font-bold text-sm">{pick.odd}</span>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </motion.div>
                          );
                        })}
                        
                        <div className="text-center mt-8">
                          <Button
                            onClick={() => setActiveTab("today")}
                            variant="primary"
                            leftIcon={<SparklesIcon className="h-5 w-5" />}
                          >
                            Create New Slip
                          </Button>
                        </div>
                      </motion.div>
                    ) : (
                      <motion.div
                        key="no-slips"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="text-center py-12"
                      >
                        <TrophyIcon className="h-16 w-16 text-text-muted mx-auto mb-4" />
                        <h3 className="text-xl font-semibold text-text-primary mb-2">No Slips Submitted Yet</h3>
                        <p className="text-text-muted mb-6">Submit a slip with 10 selections to see it here</p>
                        <Button
                          onClick={() => setActiveTab("today")}
                          variant="primary"
                          leftIcon={<SparklesIcon className="h-5 w-5" />}
                        >
                          Create Your First Slip
                        </Button>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}
