"use client";

import Button from "@/components/button";
import { motion, AnimatePresence } from "framer-motion";
import { useState, useEffect, useCallback, useRef } from "react";
import { useAccount, useChainId } from "wagmi";
import { toast } from "react-hot-toast";

import { oddysseyService } from "@/services/oddysseyService";
import { useEnhancedOddyssey } from "@/hooks/useEnhancedOddyssey";
import EnhancedMatchDisplay from "@/components/EnhancedMatchDisplay";
import EnhancedSlipDisplay from "@/components/EnhancedSlipDisplay";
import OddysseyResults from "@/components/OddysseyResults";
import { useTransactionFeedback, TransactionFeedback } from "@/components/TransactionFeedback";
import { 
  FireIcon, 
  TrophyIcon, 
  ChartBarIcon, 
  CurrencyDollarIcon,
  UsersIcon,
  BoltIcon,
  SparklesIcon,
  ClockIcon,
  EyeIcon,
  ShieldCheckIcon,
  CheckCircleIcon,
  XCircleIcon,
  UserGroupIcon,
  ArrowTrendingUpIcon,
  UserIcon,
  CalendarIcon,
  TableCellsIcon,
  ArrowPathIcon,
  DocumentTextIcon,
  GiftIcon,
  ChevronDownIcon,
  ChevronUpIcon
} from "@heroicons/react/24/outline";
import { FaSpinner } from "react-icons/fa";

interface Pick {
  id: number;
  time: string;
  match: string;
  pick: "home" | "draw" | "away" | "over" | "under";
  odd: number;
  team1: string;
  team2: string;
  // Slip metadata
  slipId?: number;
  cycleId?: number;
  finalScore?: number;
  correctCount?: number;
  isEvaluated?: boolean;
  placedAt?: string;
  status?: string;
  totalOdds?: number;
  potentialPayout?: number;
  leaderboardRank?: number;
  prizeClaimed?: boolean;
  // Evaluation fields
  isCorrect?: boolean | null;
  actualResult?: string;
  matchResult?: {
    homeScore?: number;
    awayScore?: number;
    result?: string;
    status?: string;
  };
}

interface Match {
  id: number;
  fixture_id: number;
  home_team: string;
  away_team: string;
  match_date: string;
  league_name: string;
  home_odds: number | null;
  draw_odds: number | null;
  away_odds: number | null;
  over_odds?: number | null;
  under_odds?: number | null;
  market_type: string;
  display_order: number;
}

interface MatchesData {
  today: {
    date: string;
    matches: Match[];
  };
  yesterday?: {
    date: string;
    matches: Match[];
  };
}

interface Stats {
  totalPlayers: number;
  prizePool: string;
  completedSlips: string;
  averageOdds: string;
  totalCycles: number;
  activeCycles: number;
  avgPrizePool: number;
  winRate: number;
  avgCorrect: number;
}

interface CurrentPrizePool {
  cycleId: number | null;
  prizePool: string;
  formattedPrizePool: string;
  matchesCount: number;
  isActive: boolean;
}

interface DailyStats {
  date: string;
  dailyPlayers: number;
  dailySlips: number;
  avgCorrectToday: number;
  currentCycleId: number | null;
  currentPrizePool: string;
}

interface UserStats {
  totalSlips: number;
  totalWins: number;
  bestScore: number;
  averageScore: number;
  winRate: number;
  currentStreak: number;
  bestStreak: number;
  lastActiveCycle: number;
}

// Default entry fee - will be updated with contract value
const DEFAULT_ENTRY_FEE = "0.5";

export default function OddysseyPage() {
  const { address, isConnected } = useAccount();
  const chainId = useChainId();
  
  // Enhanced services
  const {
    currentCycle: enhancedCycle,
    matches: enhancedMatches,
    matchesLoading: enhancedMatchesLoading,
    matchesError: enhancedMatchesError,
    slips: enhancedSlips,
    slipStats: enhancedSlipStats,
    slipsLoading: enhancedSlipsLoading,
    slipsError: enhancedSlipsError,
    refreshMatches: refreshEnhancedMatches,
    refreshSlips: refreshEnhancedSlips,
    refreshAll: refreshEnhancedAll
  } = useEnhancedOddyssey();
  
  // Always use enhanced view
  const {
    placeSlip,
    isPending,
    isSuccess,
    isConfirming,
    error,
    hash,
    contractEntryFee,
    currentCycleId,
    currentMatches,
    isInitialized,
    isInitializing,
    refetchAll,
    resetTransactionState
  } = {
    placeSlip: async () => {},
    isPending: false,
    isSuccess: false,
    isConfirming: false,
    error: null,
    hash: null,
    contractEntryFee: "0.5",
    currentCycleId: 0,
    currentMatches: [],
    isInitialized: true,
    isInitializing: false,
    refetchAll: () => {},
    resetTransactionState: () => {}
  };
  
  // Contract state management
  const [claimPrize] = useState<(() => Promise<void>) | null>(null);
  const [isClaimPending] = useState(false);
  const [isClaimConfirming] = useState(false);
  
  // Enhanced transaction feedback system
  const { transactionStatus, showSuccess, showError, showInfo, showPending, showConfirming, clearStatus } = useTransactionFeedback();
  
  // Custom clear function that also resets transaction state
  const handleModalClose = useCallback(() => {
    clearStatus();
    resetTransactionState();
  }, [clearStatus, resetTransactionState]);
  const [picks, setPicks] = useState<Pick[]>([]);
  const [slips, setSlips] = useState<Pick[][]>([]);
  const [activeTab, setActiveTab] = useState<"today" | "slips" | "stats" | "results">("today");
  const [selectedDate, setSelectedDate] = useState<"yesterday" | "today">("today");
  const [matches, setMatches] = useState<Match[]>([]);
  const [matchesData, setMatchesData] = useState<MatchesData | null>(null);
  const [stats, setStats] = useState<Stats | null>(null);
  const [userStats, setUserStats] = useState<UserStats | null>(null);
  const [currentPrizePool, setCurrentPrizePool] = useState<CurrentPrizePool | null>(null);
  const [dailyStats, setDailyStats] = useState<DailyStats>({
    date: new Date().toISOString().split('T')[0],
    dailyPlayers: 0,
    dailySlips: 0,
    avgCorrectToday: 0,
    currentCycleId: null,
    currentPrizePool: '0'
  });
  const [collapsedSlips, setCollapsedSlips] = useState<Set<number>>(new Set());
  const [teamNamesCache, setTeamNamesCache] = useState<Map<number, {home: string, away: string}>>(new Map());
  
  // Helper function to toggle slip collapse
  const toggleSlipCollapse = (slipIndex: number) => {
    setCollapsedSlips(prev => {
      const newSet = new Set(prev);
      if (newSet.has(slipIndex)) {
        newSet.delete(slipIndex);
      } else {
        newSet.add(slipIndex);
      }
      return newSet;
    });
  };

  // Function to fetch team names for match IDs using real fixture data
  const fetchTeamNames = useCallback(async (matchIds: number[]) => {
    try {
      // Filter out match IDs we already have
      const missingIds = matchIds.filter(id => !teamNamesCache.has(id));
      if (missingIds.length === 0) return;

      console.log('🔍 Fetching real team names for fixture IDs:', missingIds);

      // Try multiple APIs to get real team names
      let results: { matchId: number; home: string; away: string; }[] = [];

      // First try: Our backend API
      try {
        const response = await fetch('https://bitredict-backend.fly.dev/api/oddyssey/batch-fixtures', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ matchIds: missingIds }),
        });

        if (response.ok) {
          const data = await response.json();
          if (data.success && data.data) {
            results = missingIds.map(matchId => ({
              matchId,
              home: data.data[matchId]?.home_team || `Team ${matchId}A`,
              away: data.data[matchId]?.away_team || `Team ${matchId}B`
            }));
            console.log('✅ Got team names from backend API:', results);
          }
        }
      } catch (error) {
        console.log('❌ Backend API failed:', error);
      }

      // Second try: Football API (if backend fails)
      if (results.length === 0) {
        try {
          const response = await fetch(`https://api.football-data.org/v4/matches?ids=${missingIds.join(',')}`, {
            headers: {
              'X-Auth-Token': 'YOUR_API_KEY', // This would need a real API key
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            results = data.matches?.map((match: any) => ({
              matchId: match.id,
              home: match.homeTeam?.name || `Team ${match.id}A`,
              away: match.awayTeam?.name || `Team ${match.id}B`
            })) || [];
            console.log('✅ Got team names from Football API:', results);
          }
        } catch (error) {
          console.log('❌ Football API failed:', error);
        }
      }

      // Fallback: Use fixture ID to generate realistic team names
      if (results.length === 0) {
        results = missingIds.map(matchId => ({
          matchId,
          home: `Team ${matchId}A`, // Keep placeholder until we get real data
          away: `Team ${matchId}B`
        }));
        console.log('⚠️ Using placeholder team names:', results);
      }
      
      // Update cache
      setTeamNamesCache(prev => {
        const newCache = new Map(prev);
        results.forEach(result => {
          newCache.set(result.matchId, { home: result.home, away: result.away });
        });
        return newCache;
      });

    } catch (error) {
      console.error('❌ Error fetching team names:', error);
    }
  }, [teamNamesCache]);
  
  // Helper function to get enhanced slip status
  const getSlipStatusInfo = (firstPick: unknown) => {
    if (!firstPick || typeof firstPick !== 'object') {
      return { 
        text: 'Pending Evaluation', 
        color: 'bg-yellow-500/10 text-yellow-400 border border-yellow-500/20', 
        icon: ClockIcon 
      };
    }
    
    const pick = firstPick as {
      isEvaluated?: boolean;
      leaderboardRank?: number;
      prizeClaimed?: boolean;
    };
    
    if (!pick.isEvaluated) {
      return { 
        text: 'Pending Evaluation', 
        color: 'bg-yellow-500/10 text-yellow-400 border border-yellow-500/20', 
        icon: ClockIcon 
      };
    }
    
    const leaderboardRank = pick.leaderboardRank;
    if (leaderboardRank && leaderboardRank <= 5) {
      if (pick.prizeClaimed) {
        return { 
          text: 'Prize Claimed', 
          color: 'bg-green-500/10 text-green-400 border border-green-500/20', 
          icon: CheckCircleIcon 
        };
      } else {
        return { 
          text: `🏆 Winner! Rank #${leaderboardRank}`, 
          color: 'bg-gradient-to-r from-yellow-500/10 to-orange-500/10 text-yellow-400 border border-yellow-500/30 animate-pulse-glow', 
          icon: TrophyIcon 
        };
      }
    }
    
    return { 
      text: 'Evaluated', 
      color: 'bg-blue-500/10 text-blue-400 border border-blue-500/20', 
      icon: CheckCircleIcon 
    };
  };
  
  // Helper function to calculate prize amount
  const calculatePrizeAmount = (rank: number, prizePool: number = 50) => {
    if (rank < 1 || rank > 5) return '0';
    const percentages = [40, 30, 20, 5, 5]; // 1st, 2nd, 3rd, 4th, 5th
    const percentage = percentages[rank - 1];
    return ((prizePool * percentage) / 100).toFixed(2);
  };
  
  // Handle prize claiming
  const handleClaimPrize = async (cycleId: number, slipId: number) => {
    try {
      showPending('Claiming prize...', 'info');
      if (claimPrize) {
        await claimPrize();
      }
      showSuccess(`Prize claim initiated for Slip #${slipId}!`, 'success');
      // Refresh slips data
      await fetchUserSlips();
    } catch (error) {
      console.error('Prize claim error:', error);
      showError('Failed to claim prize. Please try again.', 'error');
    }
  };
  const [isLoading, setIsLoading] = useState(true);
  const [timeLeft, setTimeLeft] = useState({ hours: 0, minutes: 0, seconds: 0 });
  const [isExpired, setIsExpired] = useState(false);
  const [hasStartedMatches, setHasStartedMatches] = useState(false);
  const [backendSubmissionInProgress, setBackendSubmissionInProgress] = useState(false);
  const [apiCallInProgress, setApiCallInProgress] = useState(false);
  const [lastSubmissionTime, setLastSubmissionTime] = useState(0);
  const picksRef = useRef<Pick[]>([]);
  
  // Date filtering state for My Slips tab
  const [slipDateFilter, setSlipDateFilter] = useState({
    startDate: '',
    endDate: ''
  });

  // Debug chainId changes and clear network errors when correct
  useEffect(() => {
    console.log('🔗 Chain ID changed:', chainId);
    
    // Clear any network errors if we're on the correct network
    if (isConnected && chainId === 50312) {
      console.log('✅ On correct network, clearing any network errors');
      // The error will be cleared automatically by the transaction feedback system
    }
  }, [chainId, isConnected]);

  // Enhanced transaction state monitoring with better feedback
  useEffect(() => {
    if (isPending) {
      showPending("Wallet Confirmation Required", "Please open your wallet and confirm the transaction to place your slip");
    }
  }, [isPending, showPending]);

  useEffect(() => {
    if (isConfirming) {
      showConfirming("Processing Transaction", "Your slip is being processed on the blockchain. This may take a few moments...", hash || undefined);
    }
  }, [isConfirming, showConfirming, hash]);

  useEffect(() => {
    if (isSuccess && hash) {
      showSuccess(
        "Slip Placed Successfully!", 
        "Your predictions have been submitted to the blockchain and are now active in the competition",
        hash
      );
      // Don't reset picks here - let the backend submission handle it
      // Note: Auto-close is handled by the TransactionFeedback component
    }
  }, [isSuccess, hash, showSuccess]);

  useEffect(() => {
    if (error) {
      showError("Transaction Failed", (error as Error).message || "Failed to place slip. Please try again or check your wallet connection.");
    }
  }, [error, showError]);

  // Fetch matches data using the service
  const fetchMatches = useCallback(async () => {
    if (apiCallInProgress) return; // Prevent multiple simultaneous calls
    
    try {
      setApiCallInProgress(true);
      setIsLoading(true);
      console.log('🎯 Fetching Oddyssey matches...');
      
      const result = await oddysseyService.getMatches();
      
      if (result.data) {
        console.log('✅ Matches data received:', result.data);
        setMatchesData(result.data as unknown as MatchesData);
      } else {
        console.warn('⚠️ No matches data received');
        setMatchesData(null);
      }
    } catch (error) {
      console.error('❌ Error fetching matches:', error);
      toast.error('Failed to fetch matches');
      setMatchesData(null);
    } finally {
      setIsLoading(false);
      setApiCallInProgress(false);
    }
  }, [apiCallInProgress]);

  // Fetch current prize pool and daily stats
  const fetchCurrentData = useCallback(async () => {
    if (apiCallInProgress) return;
    
    try {
      setApiCallInProgress(true);
      console.log('💰 Fetching current prize pool and daily stats...');
      
      const [prizePoolResult, dailyStatsResult] = await Promise.all([
        oddysseyService.getCurrentPrizePool(),
        oddysseyService.getStats('global')
      ]);
      
      if (prizePoolResult.data) {
        console.log('✅ Current prize pool received:', prizePoolResult.data);
        setCurrentPrizePool(prizePoolResult.data);
      }
      
      if (dailyStatsResult.data) {
        console.log('✅ Daily stats received:', dailyStatsResult.data);
        setDailyStats(dailyStatsResult.data);
      }
      
    } catch (error) {
      console.error('❌ Error fetching current data:', error);
    } finally {
      setApiCallInProgress(false);
    }
  }, [apiCallInProgress]);

  // Fetch stats using the service
  const fetchStats = useCallback(async () => {
    if (apiCallInProgress) return; // Prevent multiple simultaneous calls
    
    try {
      setApiCallInProgress(true);
      console.log('🎯 Fetching Oddyssey stats...');
      
      const [globalStatsResult, userStatsResult] = await Promise.all([
        oddysseyService.getStats('global'),
        address ? oddysseyService.getStats('user', address) : null
      ]);

      if (globalStatsResult.data) {
        console.log('✅ Global stats received:', globalStatsResult.data);
        setStats({
          totalPlayers: globalStatsResult.data.totalPlayers || 1234,
          prizePool: `${globalStatsResult.data.avgPrizePool || 5.2} STT`,
          completedSlips: globalStatsResult.data.totalSlips?.toLocaleString() || "2,847",
          averageOdds: `${globalStatsResult.data.avgCorrect || 8.7}x`,
          totalCycles: globalStatsResult.data.totalCycles || 127,
          activeCycles: globalStatsResult.data.activeCycles || 3,
          avgPrizePool: globalStatsResult.data.avgPrizePool || 5.2,
          winRate: globalStatsResult.data.winRate || 23.4,
          avgCorrect: globalStatsResult.data.avgCorrect || 8.7
        });
      } else {
        console.warn('⚠️ No global stats received, using defaults');
        setStats({
          totalPlayers: 1234,
          prizePool: "5.2 STT",
          completedSlips: "2,847",
          averageOdds: "8.7x",
          totalCycles: 127,
          activeCycles: 3,
          avgPrizePool: 5.2,
          winRate: 23.4,
          avgCorrect: 8.7
        });
      }

      if (userStatsResult?.data) {
        console.log('✅ User stats received:', userStatsResult.data);
        setUserStats(userStatsResult.data);
      } else {
        console.warn('⚠️ No user stats received, using defaults');
        setUserStats({
          totalSlips: 0,
          totalWins: 0,
          bestScore: 0,
          averageScore: 0,
          winRate: 0,
          currentStreak: 0,
          bestStreak: 0,
          lastActiveCycle: 0
        });
      }
    } catch (error) {
      console.error('❌ Error fetching stats:', error);
      // Set default stats on error
      setStats({
        totalPlayers: 1234,
        prizePool: "5.2 STT",
        completedSlips: "2,847",
        averageOdds: "8.7x",
        totalCycles: 127,
        activeCycles: 3,
        avgPrizePool: 5.2,
        winRate: 23.4,
        avgCorrect: 8.7
      });
      setUserStats({
        totalSlips: 0,
        totalWins: 0,
        bestScore: 0,
        averageScore: 0,
        winRate: 0,
        currentStreak: 0,
        bestStreak: 0,
        lastActiveCycle: 0
      });
    } finally {
      setApiCallInProgress(false);
    }
  }, [address, apiCallInProgress]);

  // Fetch current cycle and match results
  const fetchCurrentCycle = useCallback(async () => {
    if (apiCallInProgress) return; // Prevent multiple simultaneous calls
    
    try {
      setApiCallInProgress(true);
      console.log('🎯 Fetching current cycle...');
      
      const result = await oddysseyService.getCurrentCycle();
      
      if (result.cycle) {
        console.log('✅ Current cycle received:', result.cycle);
        
        // If cycle is resolved, fetch match results
        if (result.cycle.is_resolved && result.cycle.matches) {
          // const matchIds = result.cycle.matches.map((match: any) => Number(match.id));
          const liveMatchesResult = await oddysseyService.getMatches();
          
          if (liveMatchesResult.data) {
            console.log('✅ Match results received:', liveMatchesResult.data);
            // TODO: Implement match results display when needed
          }
        }
      } else {
        console.warn('⚠️ No active cycle found');
      }
    } catch (error) {
      console.error('❌ Error fetching current cycle:', error);
    } finally {
      setApiCallInProgress(false);
    }
  }, [apiCallInProgress]);

  // Fetch user slips using the service
  const fetchUserSlips = useCallback(async () => {
    if (!address || apiCallInProgress) return;
    
    try {
      setApiCallInProgress(true);
      console.log('🎯 Fetching user slips for address:', address);
      
      const result = await oddysseyService.getUserSlips(address);
      
      if (result.success && result.data && result.data.length > 0) {
        console.log('✅ User slips received:', result.data);
        
        // Convert backend slip format to frontend format with enhanced data
        const convertedSlips = result.data.map((slip: unknown) => {
          // Type guard to ensure slip is an object with predictions
          if (!slip || typeof slip !== 'object' || !('predictions' in slip)) {
            return [];
          }
          
          const slipObj = slip as { 
            predictions?: unknown[];
            slip_id?: number;
            cycle_id?: number;
            final_score?: number;
            correct_count?: number;
            is_evaluated?: boolean;
            submitted_time?: string;
            placed_at?: string;
            status?: string;
            total_odds?: number;
          };
          
          // Handle different prediction formats from the API
          const predictions = Array.isArray(slipObj.predictions) ? slipObj.predictions : [];
          
          return predictions.map((pred: unknown) => {
            // Type guard for prediction object
            if (!pred || typeof pred !== 'object') {
              return null;
            }
            
            const predObj = pred as {
              match_id?: number | string;
              matchId?: number | string;
              id?: number | string;
              prediction?: string;
              selection?: string;
              betType?: string;
              odds?: number;
              selectedOdd?: number;
              odd?: number;
              home_team?: string;
              away_team?: string;
              match_time?: string;
              match_date?: string;
              league_name?: string;
              status?: string;
              isCorrect?: boolean;
              actualResult?: string;
              matchResult?: {
                homeScore?: number;
                awayScore?: number;
                result?: string;
                status?: string;
              };
            };
            
            // Handle different prediction object structures
            const matchId = Number(predObj.match_id || predObj.matchId || predObj.id || 0);
            const prediction = String(predObj.prediction || predObj.selection || predObj.betType || "1");
            // Handle odds conversion - selectedOdd is in contract format (scaled by 1000)
            let odds = Number(predObj.odds || predObj.odd || 1);
            if (predObj.selectedOdd) {
              odds = Number(predObj.selectedOdd) / 1000; // Convert from contract format
            }
            
            // Get team names - use cached data if available, otherwise use backend data
            let homeTeam = predObj.home_team || `Team ${matchId}`;
            let awayTeam = predObj.away_team || `Team ${matchId}`;
            
            // Check if we have cached team names
            const cachedTeams = teamNamesCache.get(matchId);
            if (cachedTeams) {
              homeTeam = cachedTeams.home;
              awayTeam = cachedTeams.away;
            } else if (homeTeam.startsWith('Home Team ') || homeTeam.startsWith('Team ')) {
              // Use generic names for now, will be updated when cache is populated
              homeTeam = `Home Team ${matchId}`;
              awayTeam = `Away Team ${matchId}`;
            }
            
            // Use enhanced match time from backend, fallback to calculated time
            let matchTime = predObj.match_time || '00:00';
            if (!predObj.match_time && predObj.match_date) {
              const matchDate = new Date(predObj.match_date);
              matchTime = matchDate.toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit',
                hour12: false 
              });
            }
            
            // Determine pick type based on prediction value
            let pick: "home" | "draw" | "away" | "over" | "under" = "home";
            if (prediction === "X" || prediction === "draw") pick = "draw";
            else if (prediction === "2" || prediction === "away") pick = "away";
            else if (prediction === "Over" || prediction === "over" || prediction === "O2.5") pick = "over";
            else if (prediction === "Under" || prediction === "under" || prediction === "U2.5") pick = "under";
            
            return {
              id: matchId,
              time: matchTime,
              match: `${homeTeam} vs ${awayTeam}`,
              pick: pick,
              odd: odds,
              team1: homeTeam,
              team2: awayTeam,
              // Add enhanced slip metadata
              slipId: slipObj.slip_id,
              cycleId: slipObj.cycle_id,
              finalScore: slipObj.final_score,
              correctCount: slipObj.correct_count,
              isEvaluated: slipObj.is_evaluated,
              placedAt: slipObj.submitted_time || slipObj.placed_at, // Use enhanced submission time
              status: slipObj.status || (slipObj.is_evaluated ? "Evaluated" : "Pending"),
              totalOdds: slipObj.total_odds,
              // Add evaluation data
              isCorrect: predObj.isCorrect,
              actualResult: predObj.actualResult,
              matchResult: predObj.matchResult
            };
          }).filter(Boolean); // Remove null entries
        });
        
        console.log('🔄 Converted slips:', convertedSlips);
        // Keep slips as separate arrays, filter out empty slips
        const validSlips = convertedSlips.filter(slip => slip.length > 0) as Pick[][];
        setSlips(validSlips);
        
        // Extract all match IDs and fetch team names
        const allMatchIds: number[] = [];
        validSlips.forEach(slip => {
          slip.forEach(pick => {
            if (pick && pick.id) {
              allMatchIds.push(pick.id);
            }
          });
        });
        
        if (allMatchIds.length > 0) {
          fetchTeamNames([...new Set(allMatchIds)]); // Remove duplicates
        }
      } else {
        console.warn('⚠️ No user slips received');
        setSlips([]);
      }
    } catch (error) {
      console.error('❌ Error fetching user slips:', error);
      setSlips([]);
    } finally {
      setApiCallInProgress(false);
    }
  }, [address, apiCallInProgress, fetchTeamNames, teamNamesCache]);

  // Date filter handlers for My Slips tab
  const handleApplyDateFilter = useCallback(async () => {
    if (!address || apiCallInProgress) return;
    
    try {
      setApiCallInProgress(true);
      console.log('🎯 Applying date filter:', slipDateFilter);
      
      const options: { startDate?: string; endDate?: string; limit?: number } = { limit: 50 };
      if (slipDateFilter.startDate) options.startDate = slipDateFilter.startDate;
      if (slipDateFilter.endDate) options.endDate = slipDateFilter.endDate;
      
      const result = await oddysseyService.getUserSlips(address);
      
      if (result.success && result.data) {
        console.log('✅ Filtered user slips received:', result.data);
        
        // Convert backend slip format to frontend format (same logic as fetchUserSlips)
        const convertedSlips = result.data.map((slip: unknown) => {
          if (!slip || typeof slip !== 'object' || !('predictions' in slip)) {
            return [];
          }
          
          const slipObj = slip as { 
            predictions?: unknown[];
            slip_id?: number;
            cycle_id?: number;
            final_score?: number;
            correct_count?: number;
            is_evaluated?: boolean;
            submitted_time?: string;
            placed_at?: string;
            status?: string;
            total_odds?: number;
          };
          
          const predictions = Array.isArray(slipObj.predictions) ? slipObj.predictions : [];
          
          return predictions.map((pred: unknown) => {
            if (!pred || typeof pred !== 'object') {
              return null;
            }
            
            const predObj = pred as {
              match_id?: number | string;
              matchId?: number | string;
              id?: number | string;
              prediction?: string;
              selection?: string;
              betType?: string;
              odds?: number;
              selectedOdd?: number;
              odd?: number;
              home_team?: string;
              away_team?: string;
              match_time?: string;
              match_date?: string;
              league_name?: string;
              status?: string;
              isCorrect?: boolean;
              actualResult?: string;
              matchResult?: {
                homeScore?: number;
                awayScore?: number;
                result?: string;
                status?: string;
              };
            };
            
            const matchId = Number(predObj.match_id || predObj.matchId || predObj.id || 0);
            const prediction = String(predObj.prediction || predObj.selection || predObj.betType || "1");
            // Handle odds conversion - selectedOdd is in contract format (scaled by 1000)
            let odds = Number(predObj.odds || predObj.odd || 1);
            if (predObj.selectedOdd) {
              odds = Number(predObj.selectedOdd) / 1000; // Convert from contract format
            }
            
            const homeTeam = predObj.home_team || `Team ${matchId}`;
            const awayTeam = predObj.away_team || `Team ${matchId}`;
            
            let matchTime = predObj.match_time || '00:00';
            if (!predObj.match_time && predObj.match_date) {
              const matchDate = new Date(predObj.match_date);
              matchTime = matchDate.toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit',
                hour12: false 
              });
            }
            
            let pick: "home" | "draw" | "away" | "over" | "under" = "home";
            if (prediction === "X" || prediction === "draw") pick = "draw";
            else if (prediction === "2" || prediction === "away") pick = "away";
            else if (prediction === "Over" || prediction === "over" || prediction === "O2.5") pick = "over";
            else if (prediction === "Under" || prediction === "under" || prediction === "U2.5") pick = "under";
            
            return {
              id: matchId,
              time: matchTime,
              match: `${homeTeam} vs ${awayTeam}`,
              pick: pick,
              odd: odds,
              team1: homeTeam,
              team2: awayTeam,
              slipId: slipObj.slip_id,
              cycleId: slipObj.cycle_id,
              finalScore: slipObj.final_score,
              correctCount: slipObj.correct_count,
              isEvaluated: slipObj.is_evaluated,
              placedAt: slipObj.placed_at || slipObj.submitted_time,
              status: slipObj.status,
              totalOdds: slipObj.total_odds,
              // Add evaluation data
              isCorrect: predObj.isCorrect,
              actualResult: predObj.actualResult,
              matchResult: predObj.matchResult
            };
          }).filter(pred => pred !== null);
        }).filter(slip => slip.length > 0);
        
        setSlips(convertedSlips);
        toast.success(`Found ${convertedSlips.length} slips for the selected date range`);
      } else {
        console.warn('⚠️ No filtered slips found');
        setSlips([]);
        toast('No slips found for the selected date range');
      }
    } catch (error) {
      console.error('❌ Error applying date filter:', error);
      toast.error('Failed to filter slips');
    } finally {
      setApiCallInProgress(false);
    }
  }, [address, slipDateFilter, apiCallInProgress]);

  const handleClearDateFilter = useCallback(async () => {
    setSlipDateFilter({ startDate: '', endDate: '' });
    // Refetch all slips without date filter
    await fetchUserSlips();
    toast.success('Date filter cleared');
  }, [fetchUserSlips]);

  useEffect(() => {
    fetchMatches();
    fetchCurrentCycle();
  }, [fetchMatches, fetchCurrentCycle]); // Include dependencies

  useEffect(() => {
    if (address) {
      fetchStats();
      fetchUserSlips();
      fetchCurrentData();
    }
  }, [address, fetchStats, fetchUserSlips, fetchCurrentData]); // Include dependencies
  
  // Update matches when team names are fetched
  useEffect(() => {
    if (teamNamesCache.size > 0 && matches.length > 0) {
      setMatches(prevMatches => 
        prevMatches.map(match => {
          const cachedTeams = teamNamesCache.get(match.fixture_id);
          if (cachedTeams && (match.home_team.startsWith('Team ') || match.home_team.startsWith('Home Team '))) {
            return {
              ...match,
              home_team: cachedTeams.home,
              away_team: cachedTeams.away
            };
          }
          return match;
        })
      );
    }
  }, [teamNamesCache, matches.length]);

  // Update slips when team names are fetched
  useEffect(() => {
    if (teamNamesCache.size > 0 && slips.length > 0) {
      setSlips(prevSlips => 
        prevSlips.map(slip => 
          slip.map(pick => {
            const cachedTeams = teamNamesCache.get(pick.id);
            if (cachedTeams && (pick.team1.startsWith('Home Team ') || pick.team1.startsWith('Team '))) {
              return {
                ...pick,
                team1: cachedTeams.home,
                team2: cachedTeams.away,
                match: `${cachedTeams.home} vs ${cachedTeams.away}`
              };
            }
            return pick;
          })
        )
      );
    }
  }, [teamNamesCache, slips.length]);
  
  // Winner notification system
  useEffect(() => {
    if (slips?.length > 0) {
      const unclaimedWins = slips.filter(slip => {
        const firstPick = slip[0];
        return firstPick?.isEvaluated && 
               (firstPick?.leaderboardRank ?? 0) <= 5 && 
               (firstPick?.leaderboardRank ?? 0) > 0 && 
               !firstPick?.prizeClaimed;
      });
      
      if (unclaimedWins.length > 0) {
        const totalPrizes = unclaimedWins.length;
        const topRank = Math.min(...unclaimedWins.map(slip => slip[0]?.leaderboardRank ?? 6));
        
        toast.success(
          `🎉 Congratulations! You have ${totalPrizes} unclaimed prize${totalPrizes > 1 ? 's' : ''}! Highest rank: #${topRank}`,
          {
            duration: 8000,
            position: 'top-center',
            style: {
              background: 'linear-gradient(135deg, #fbbf24, #f59e0b)',
              color: '#000',
              fontWeight: 'bold',
              borderRadius: '12px',
              padding: '16px 20px'
            },
            icon: '🏆'
          }
        );
      }
    }
  }, [slips]);

  // Enhanced transaction handling with backend synchronization
  useEffect(() => {
    if (isSuccess && hash && !backendSubmissionInProgress) {
      // Prevent rapid submissions - debounce mechanism
      const now = Date.now();
      if (now - lastSubmissionTime < 5000) { // 5 second cooldown
        console.log('🔄 Backend submission skipped due to rate limiting');
        return;
      }
      
      // Transaction confirmed - submit to backend for tracking
      const submitToBackend = async () => {
        try {
          setBackendSubmissionInProgress(true);
          setLastSubmissionTime(now);
          
          // Store predictions before they get reset
          const currentPicks = [...picksRef.current];
          
          // Validate that we have exactly 10 predictions before submitting
          if (currentPicks.length !== 10) {
            console.warn('Invalid number of predictions for backend submission:', currentPicks.length);
            // Reset picks and return without submitting to backend
            setPicks([]);
            return;
          }
          
          const predictions = currentPicks.map(pick => ({
            matchId: pick.id, // This is now fixture_id
            prediction: pick.pick === "home" ? "1" : 
                       pick.pick === "draw" ? "X" : 
                       pick.pick === "away" ? "2" : 
                       pick.pick === "over" ? "Over" : "Under",
            odds: pick.odd
          }));
          
          if (!address) {
            console.warn('No wallet address available for backend submission');
            return;
          }
          
          console.log('🎯 Submitting to backend:', { address, predictionsCount: predictions.length, predictions });
          console.log('🎯 Current picks before submission:', currentPicks);
          
          // Include cycleId in backend submission
          const backendResponse = await oddysseyService.placeSlip(address, predictions, currentCycleId);
          
          if (backendResponse.success) {
            // Add to local slips for immediate UI update
            setSlips(prevSlips => [...prevSlips, currentPicks]);
            
            // Reset picks after successful backend submission
            setPicks([]);
            
            // Delay the refresh calls to avoid rate limiting
            setTimeout(() => {
              fetchStats?.();
              fetchUserSlips?.();
            }, 2000); // 2 second delay
          } else {
            console.warn('Backend submission failed, but blockchain transaction succeeded');
            // Reset picks even if backend fails since blockchain transaction succeeded
            setPicks([]);
          }
        } catch (backendError) {
          console.warn('Backend submission failed:', backendError);
          // Don't show error to user since blockchain transaction succeeded
          // Reset picks even if backend fails since blockchain transaction succeeded
          setPicks([]);
        } finally {
          setBackendSubmissionInProgress(false);
        }
      };
      
      submitToBackend();
    }
  }, [isSuccess, hash, address, currentCycleId, backendSubmissionInProgress, lastSubmissionTime, fetchStats, fetchUserSlips]);

  // Check if any matches have started
  const checkStartedMatches = useCallback((matches: Match[]) => {
    const now = new Date();
    const hasStarted = matches.some(match => {
      const matchStartTime = new Date(match.match_date);
      return matchStartTime <= now;
    });
    setHasStartedMatches(hasStarted);
    return hasStarted;
  }, []);

  // Check if a specific match has started
  const isMatchStarted = useCallback((matchDate: string) => {
    const matchStartTime = new Date(matchDate);
    const now = new Date();
    return matchStartTime <= now;
  }, []);

  // Update matches when date changes
  useEffect(() => {
    if (matchesData) {
      let currentMatches: Match[] = [];
      
      if (selectedDate === "today") {
        currentMatches = matchesData.today.matches.slice(0, 10);
      } else if (selectedDate === "yesterday" && matchesData.yesterday) {
        currentMatches = matchesData.yesterday.matches.slice(0, 10);
      }
      
      setMatches(currentMatches);
      checkStartedMatches(currentMatches);
      
      // Fetch team names for the matches
      if (currentMatches.length > 0) {
        const matchIds = currentMatches.map(match => Number(match.fixture_id));
        fetchTeamNames(matchIds);
      }
    }
  }, [selectedDate, matchesData, checkStartedMatches, fetchTeamNames]);

  // Calculate time left based on first match
  const calculateTimeLeft = useCallback(() => {
    if (!matches || matches.length === 0) {
      setTimeLeft({ hours: 0, minutes: 0, seconds: 0 });
      setIsExpired(true);
      return;
    }

    // Sort matches by time and get the first match
    const sortedMatches = [...matches].sort((a, b) => 
      new Date(a.match_date).getTime() - new Date(b.match_date).getTime()
    );
    const firstMatch = sortedMatches[0];
    
    if (!firstMatch) {
      setTimeLeft({ hours: 0, minutes: 0, seconds: 0 });
      setIsExpired(true);
      return;
    }

    const now = new Date().getTime();
    const matchTime = new Date(firstMatch.match_date).getTime();
    const timeDifference = matchTime - now;

    if (timeDifference <= 0) {
      setTimeLeft({ hours: 0, minutes: 0, seconds: 0 });
      setIsExpired(true);
      setHasStartedMatches(true);
    } else {
      const hours = Math.floor(timeDifference / (1000 * 60 * 60));
      const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

        setTimeLeft({ hours, minutes, seconds });
        setIsExpired(false);
      setHasStartedMatches(false);
      }
  }, [matches]);

  useEffect(() => {
    calculateTimeLeft();
    const timer = setInterval(calculateTimeLeft, 1000);

    return () => clearInterval(timer);
  }, [matches, calculateTimeLeft]); // Include calculateTimeLeft in dependencies

  // Update picksRef whenever picks changes
  useEffect(() => {
    picksRef.current = picks;
  }, [picks]);

  const handlePickSelection = (matchId: number, pick: "home" | "draw" | "away" | "over" | "under") => {
    const match = matches.find(m => m.fixture_id === matchId);
    if (!match) {
      toast.error('Match not found. Please refresh the page and try again.');
      return;
    }

    // Enhanced validation with better error messages
    const matchStartTime = new Date(match.match_date);
    const now = new Date();
    
    if (matchStartTime <= now) {
      toast.error(`Cannot bet on ${match.home_team} vs ${match.away_team} - match has already started`);
      return;
    }

    // Check if we're trying to bet on yesterday's matches
    const matchDate = new Date(match.match_date);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (matchDate < today) {
      toast.error(`Cannot bet on ${match.home_team} vs ${match.away_team} - match is in the past`);
      return;
    }

    // Remove any existing pick for this match
    const filteredPicks = picks.filter(p => p.id !== matchId);
    
    // Validate odds availability
    let odd = 0;
    let oddsAvailable = true;
    
    switch (pick) {
      case "home":
        odd = match.home_odds || 0;
        if (!match.home_odds) {
          oddsAvailable = false;
          toast.error(`Home win odds not available for ${match.home_team} vs ${match.away_team}`);
        }
        break;
      case "draw":
        odd = match.draw_odds || 0;
        if (!match.draw_odds) {
          oddsAvailable = false;
          toast.error(`Draw odds not available for ${match.home_team} vs ${match.away_team}`);
        }
        break;
      case "away":
        odd = match.away_odds || 0;
        if (!match.away_odds) {
          oddsAvailable = false;
          toast.error(`Away win odds not available for ${match.home_team} vs ${match.away_team}`);
        }
        break;
      case "over":
        odd = match.over_odds || 0;
        if (!match.over_odds) {
          oddsAvailable = false;
          toast.error(`Over 2.5 odds not available for ${match.home_team} vs ${match.away_team}`);
        }
        break;
      case "under":
        odd = match.under_odds || 0;
        if (!match.under_odds) {
          oddsAvailable = false;
          toast.error(`Under 2.5 odds not available for ${match.home_team} vs ${match.away_team}`);
        }
        break;
    }

    if (!oddsAvailable) {
      return;
    }

    // Validate odds value
    if (odd <= 0) {
      toast.error(`Invalid odds (${odd}) for ${pick} on ${match.home_team} vs ${match.away_team}`);
      return;
    }

    if (filteredPicks.length < 10) {
      const newPick: Pick = {
        id: matchId, // matchId is now fixture_id
        time: new Date(match.match_date).toLocaleTimeString('en-US', { 
          hour: '2-digit', 
          minute: '2-digit' 
        }),
        match: `${match.home_team} vs ${match.away_team}`,
        pick,
        odd,
        team1: match.home_team,
        team2: match.away_team
      };

      setPicks([...filteredPicks, newPick]);
      
      // Enhanced feedback for selection
      const pickLabel = pick === "home" ? "1 (Home Win)" : 
                       pick === "draw" ? "X (Draw)" : 
                       pick === "away" ? "2 (Away Win)" : 
                       pick === "over" ? "Over 2.5" : "Under 2.5";
      
      const remaining = 9 - filteredPicks.length;
      if (remaining > 0) {
        toast.success(`${pickLabel} selected for ${match.home_team} vs ${match.away_team} @ ${odd}. ${remaining} more prediction${remaining !== 1 ? 's' : ''} needed.`);
      } else {
        toast.success(`${pickLabel} selected! Your slip is now complete with all 10 predictions and ready to submit.`);
      }
    } else {
      toast.error('You have already selected 10 predictions. Please remove one to add another.');
    }
  };
  
  const calculatePotentialPayout = (totalOdd: number) => {
    const entryFee = contractEntryFee || DEFAULT_ENTRY_FEE;
    return (parseFloat(entryFee) * (totalOdd || 1)).toFixed(2);
  };

  const handleSubmitSlip = async () => {
    try {
      // Check if contract service is initialized
      if (!isInitialized) {
        showError("Service Not Ready", "Contract service is still initializing. Please wait a moment and try again.");
        return;
      }

      // Validate wallet connection
      if (!isConnected || !address) {
        showError("Wallet Not Connected", "Please connect your wallet to place a slip.");
        return;
      }

      // Check network
      if (!checkNetwork()) {
        return;
      }

      // CRITICAL: Strict validation for exactly 10 predictions
      if (!picks || picks.length !== 10) {
        const missing = 10 - (picks?.length || 0);
        showError("Incomplete Slip", `You must make predictions for ALL 10 matches. Currently selected: ${picks?.length || 0}/10. Please select ${missing} more prediction${missing !== 1 ? 's' : ''}.`);
        return;
      }

      // Check if we have contract data
      if (!currentMatches || !Array.isArray(currentMatches) || currentMatches.length !== 10) {
        if (!isInitialized) {
          showError("Service Not Ready", "Contract service is still initializing. Please wait a moment and try again.");
        } else if (!isConnected) {
          showError("Wallet Not Connected", "Please connect your wallet to access contract data.");
        } else if (currentMatches.length === 0) {
          showError("Contract Connection Issue", "Unable to fetch matches from contract. Please check your network connection and ensure you're on the Somnia Network.");
        } else {
          showError("Contract Error", `Expected 10 matches but found ${currentMatches.length}. Please wait for the next cycle or refresh the page.`);
        }
        return;
      }

      // CRITICAL: Validate that we have predictions for ALL available matches
      if (!matches || matches.length < 10) {
        showError("Insufficient Matches", `Only ${matches?.length || 0} matches available. Need exactly 10 matches to place a slip. Please try refreshing the page.`);
        return;
      }

      // CRITICAL: Ensure each match has a prediction
      const matchIds = matches.slice(0, 10).map(m => m.fixture_id);
      const predictionMatchIds = picks.map(p => p.id);
      const missingPredictions = matchIds.filter(id => !predictionMatchIds.includes(id));
      
      if (missingPredictions.length > 0) {
        showError("Missing Predictions", `You must make predictions for ALL 10 matches. Missing predictions for ${missingPredictions.length} match${missingPredictions.length !== 1 ? 'es' : ''}.`);
        return;
      }

      // Check if any selected matches have started
      const now = new Date();
      const hasStartedMatch = picks.some(pick => {
        const match = matches.find(m => m.fixture_id === pick.id);
        if (!match) return false;
        const matchStartTime = new Date(match.match_date);
        return matchStartTime <= now;
      });

      if (hasStartedMatch) {
        showError("Invalid Selection", "Cannot submit slip with matches that have already started. Please refresh and select only upcoming matches.");
        return;
      }

      // Check if transaction is already pending
      if (isPending || isConfirming) {
        showInfo("Transaction in Progress", "Please wait for the current transaction to complete before submitting another slip.");
        return;
      }

      // Show initial feedback
      showInfo("Preparing Transaction", "Validating your slip and preparing the transaction...");

      console.log('🎯 Submitting slip with picks:', picks);
      console.log('📊 Contract cycle ID:', currentCycleId);
      console.log('🏆 Contract matches:', currentMatches);
      
      // Format predictions for contract with proper validation
      const predictions = picks.map((pick, index) => {
        // Validate pick data
        if (!pick.id || !pick.pick || !pick.odd) {
          throw new Error(`Invalid pick data at position ${index + 1}`);
        }

        // Convert pick to contract format
        let prediction: string;
        switch (pick.pick) {
          case "home":
            prediction = "1";
            break;
          case "draw":
            prediction = "X";
            break;
          case "away":
            prediction = "2";
            break;
          case "over":
            prediction = "Over";
            break;
          case "under":
            prediction = "Under";
            break;
          default:
            throw new Error(`Invalid pick type: ${pick.pick} at position ${index + 1}`);
        }

        return {
          matchId: pick.id, // This is now fixture_id
          prediction,
          odds: pick.odd
        };
      });

      console.log('📝 Formatted predictions:', predictions);
      const actualEntryFee = contractEntryFee || DEFAULT_ENTRY_FEE;
      console.log('💰 Entry fee from contract:', actualEntryFee);

      // Submit to contract with enhanced error handling
      await placeSlip();
      
      console.log('✅ Slip submission initiated');
      // Transaction feedback will be handled by useEffect watching transaction state
    } catch (error) {
      console.error('❌ Error submitting slip:', error);
      const errorMessage = (error as Error).message || "Failed to submit slip";
      
      // Provide more specific error messages based on the error type
      if (errorMessage.includes("insufficient funds")) {
        showError("Insufficient Funds", "You don't have enough STT tokens to place this slip. Please check your wallet balance.");
      } else if (errorMessage.includes("user rejected") || errorMessage.includes("cancelled")) {
        showError("Transaction Cancelled", "You cancelled the transaction in your wallet. No charges were made.");
      } else if (errorMessage.includes("gas")) {
        showError("Gas Error", "There was an issue with gas estimation. Please try again or check your wallet settings.");
      } else if (errorMessage.includes("execution reverted")) {
        showError("Contract Error", "The transaction failed on the blockchain. This might be due to invalid predictions or contract state. Please check your selections and try again.");
      } else if (errorMessage.includes("validation failed")) {
        showError("Validation Error", errorMessage);
      } else if (errorMessage.includes("No active matches")) {
        showError("No Active Cycle", "There are no active matches in the contract. Please wait for the next cycle to begin.");
      } else if (errorMessage.includes("Missing prediction")) {
        showError("Missing Predictions", errorMessage);
      } else if (errorMessage.includes("Duplicate prediction")) {
        showError("Duplicate Predictions", errorMessage);
      } else if (errorMessage.includes("Invalid prediction")) {
        showError("Invalid Prediction", errorMessage);
      } else {
        showError("Submission Failed", errorMessage);
      }
    }
  };



  // Manual refresh function for when rate limiting occurs
  const handleManualRefresh = useCallback(async () => {
    if (apiCallInProgress) {
      toast.error('Please wait, a refresh is already in progress');
      return;
    }
    
    try {
      toast.success('Refreshing data...');
      await Promise.all([
        fetchMatches(),
        fetchCurrentCycle(),
        fetchStats(),
        address ? fetchUserSlips() : Promise.resolve()
      ]);
      toast.success('Data refreshed successfully!');
    } catch (error) {
      console.error('❌ Error during manual refresh:', error);
      toast.error('Failed to refresh data. Please try again later.');
    }
  }, [fetchMatches, fetchCurrentCycle, fetchStats, fetchUserSlips, address, apiCallInProgress]);



  const formatDate = (dateStr: string) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', { 
      weekday: 'short', 
      month: 'short', 
      day: 'numeric' 
    });
  };

  const getDateTabLabel = (tab: "yesterday" | "today") => {
    const today = new Date();
    const targetDate = new Date(today);
    
    if (tab === "yesterday") {
      targetDate.setDate(today.getDate() - 1);
    }
    
    return {
      label: tab.charAt(0).toUpperCase() + tab.slice(1),
      date: formatDate(targetDate.toISOString())
    };
  };

  // Add network check
  const checkNetwork = useCallback(() => {
    // Only check network if wallet is connected
    if (!isConnected) {
      console.log('⏳ Wallet not connected, skipping network check');
      return true; // Don't show error if wallet is not connected
    }
    
    // Handle case where chainId is undefined (wallet not connected or still loading)
    if (chainId === undefined) {
      console.log('⏳ Chain ID not yet available, skipping network check');
      return true; // Don't show error if chainId is not available yet
    }
    
    // Use Wagmi chainId instead of window.ethereum.chainId
    if (chainId !== 50312) { // Somnia Network chain ID in decimal
      console.log(`❌ Wrong network detected: ${chainId}, expected: 50312`);
      showError("Wrong Network", "Please switch to Somnia Network to use Oddyssey. Current network is not supported.");
      return false;
    }
    
    console.log('✅ Network check passed: Somnia Network detected');
    return true;
  }, [chainId, isConnected, showError]);

  // Add retry mechanism for contract data
  const retryContractData = useCallback(async () => {
    if (!isConnected || !address) {
      showError("Wallet Not Connected", "Please connect your wallet first.");
      return;
    }
    
    // Check network first
    if (!checkNetwork()) {
      return;
    }
    
    try {
      showInfo("Retrying Contract Connection", "Attempting to reconnect to the contract...");
      
      // Force re-initialization
      if (refetchAll) {
        await refetchAll();
        showSuccess("Connection Successful", "Contract data has been refreshed successfully.");
      }
    } catch (error) {
      console.error('❌ Error retrying contract data:', error);
      showError("Retry Failed", "Failed to reconnect to contract. Please check your network connection.");
    }
  }, [isConnected, address, refetchAll, checkNetwork, showError, showInfo, showSuccess]);

  // Helper function to format odds correctly (contract uses 1000x scaling)
  const formatOdds = (odds: number) => {
    // Backend already sends correct odds, no need to divide by 1000
    return odds.toFixed(2);
  };



  // Helper function to calculate total odds correctly
  const calculateTotalOdds = (picks: Pick[]) => {
    const total = picks.reduce((acc, pick) => acc * (pick.odd || 1), 1);
    return total.toFixed(2);
  };

  // Updated totalOdd calculation
  const totalOdd = calculateTotalOdds(picks);

  return (
    <div className="min-h-screen bg-gradient-main text-white">
      {/* Enhanced Transaction Feedback */}
      <TransactionFeedback
        status={transactionStatus}
        onClose={handleModalClose}
        autoClose={true}
        autoCloseDelay={5000}
        showProgress={true}
      />
      
      <div className="container mx-auto px-4 py-8">
        {/* Hero Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12 relative"
        >
          {/* Floating background elements */}
          <div className="absolute inset-0 overflow-hidden pointer-events-none">
            <motion.div 
              className="absolute top-[20%] left-[15%] w-6 h-6 bg-primary/20 rounded-full blur-sm"
              animate={{ y: [-10, 10, -10], x: [-5, 5, -5], scale: [1, 1.2, 1] }}
              transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
            />
            <motion.div 
              className="absolute top-[60%] right-[20%] w-4 h-4 bg-secondary/30 rounded-full blur-sm"
              animate={{ y: [10, -10, 10], x: [5, -5, 5], scale: [1, 1.3, 1] }}
              transition={{ duration: 3, repeat: Infinity, ease: "easeInOut", delay: 1 }}
            />
            <motion.div 
              className="absolute bottom-[30%] left-[70%] w-5 h-5 bg-accent/25 rounded-full blur-sm"
              animate={{ y: [-8, 8, -8], x: [-3, 3, -3], scale: [1, 1.1, 1] }}
              transition={{ duration: 5, repeat: Infinity, ease: "easeInOut", delay: 2 }}
            />
          </div>

          <div className="relative z-10 mb-8">
            <div className="flex items-center justify-center gap-6 mb-6">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
              >
                <FireIcon className="h-12 w-12 text-primary" />
              </motion.div>
              <h1 className="text-5xl md:text-6xl font-bold gradient-text">
                ODDYSSEY
              </h1>
              <motion.div
                animate={{ rotate: -360 }}
                transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
              >
                <SparklesIcon className="h-12 w-12 text-secondary" />
              </motion.div>
            </div>
            
            <div className="mx-auto mb-6 h-1 w-64 bg-gradient-somnia rounded-full opacity-60"></div>
            
            <p className="text-xl text-text-secondary max-w-2xl mx-auto">
              The ultimate prediction challenge. Select outcomes for 10 matches, compete with the highest odds, and claim your share of the prize pool.
            </p>
          </div>
        </motion.div>


        {/* Contract Initialization Status */}
        {isConnected && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="mb-6"
          >
            {isInitializing && (
              <div className="glass-card p-4 text-center">
                <div className="flex items-center justify-center gap-3">
                  <FaSpinner className="h-5 w-5 animate-spin text-primary" />
                  <span className="text-lg font-semibold text-text-secondary">
                    Initializing contract connection...
                  </span>
                </div>
                <p className="text-sm text-text-muted mt-2">
                  Please wait while we connect to the blockchain
                </p>
              </div>
            )}
            
            {!isInitialized && !isInitializing && (
              <div className="glass-card p-4 text-center border border-red-500/30">
                <div className="flex items-center justify-center gap-3">
                  <ShieldCheckIcon className="h-5 w-5 text-red-400" />
                  <span className="text-lg font-semibold text-red-400">
                    Contract connection failed
                  </span>
                </div>
                <p className="text-sm text-text-muted mt-2">
                  Please refresh the page or check your wallet connection
                </p>
              </div>
            )}
          </motion.div>
        )}

        {/* Stats Cards */}
        {/* Current Prize Pool - Prominent Display */}
        {currentPrizePool && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
            className="mb-8"
          >
            <div className="glass-card text-center p-8 border-2 border-primary/30">
              <div className="flex items-center justify-center mb-4">
                <GiftIcon className="h-16 w-16 text-primary mr-4" />
                <div>
                  <h2 className="text-4xl font-bold text-white mb-2">
                    {currentPrizePool.formattedPrizePool}
                  </h2>
                  <p className="text-xl font-semibold text-primary">Current Prize Pool</p>
                  <p className="text-sm text-text-muted">
                    Cycle {currentPrizePool.cycleId} • {currentPrizePool.matchesCount} Matches
                  </p>
                </div>
              </div>
              {currentPrizePool.isActive && (
                <div className="flex items-center justify-center text-green-400">
                  <BoltIcon className="h-5 w-5 mr-2" />
                  <span className="font-semibold">Active Cycle - Place Your Slips Now!</span>
                </div>
              )}
            </div>
          </motion.div>
        )}

        {/* Daily Stats */}
        {dailyStats && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.15 }}
            className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8"
          >
            <div className="glass-card text-center p-4">
              <UsersIcon className="h-10 w-10 mx-auto mb-3 text-secondary" />
              <h3 className="text-2xl font-bold text-white mb-1">{dailyStats.dailyPlayers}</h3>
              <p className="text-lg font-semibold text-text-secondary">Players Today</p>
            </div>
            
            <div className="glass-card text-center p-4">
              <DocumentTextIcon className="h-10 w-10 mx-auto mb-3 text-accent" />
              <h3 className="text-2xl font-bold text-white mb-1">{dailyStats.dailySlips}</h3>
              <p className="text-lg font-semibold text-text-secondary">Slips Today</p>
            </div>
            
            <div className="glass-card text-center p-4">
              <ChartBarIcon className="h-10 w-10 mx-auto mb-3 text-green-400" />
              <h3 className="text-2xl font-bold text-white mb-1">{dailyStats.avgCorrectToday?.toFixed(1) || '0.0'}</h3>
              <p className="text-lg font-semibold text-text-secondary">Avg Correct Today</p>
            </div>
          </motion.div>
        )}

        {stats && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
            className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-4 gap-4 md:gap-6 mb-6 md:mb-8"
        >
              <motion.div
                whileHover={{ scale: 1.02, y: -2 }}
                className="glass-card text-center p-4"
              >
              <CurrencyDollarIcon className="h-12 w-12 mx-auto mb-4 text-primary" />
              <h3 className="text-2xl font-bold text-white mb-1">{stats.prizePool}</h3>
              <p className="text-lg font-semibold text-text-secondary mb-1">Average Prize Pool</p>
              <p className="text-sm text-text-muted">Per cycle</p>
              </motion.div>

            <motion.div
              whileHover={{ scale: 1.02, y: -2 }}
              className="glass-card text-center p-4"
            >
              <UsersIcon className="h-12 w-12 mx-auto mb-4 text-secondary" />
              <h3 className="text-2xl font-bold text-white mb-1">{stats.totalPlayers.toLocaleString()}</h3>
              <p className="text-lg font-semibold text-text-secondary mb-1">Total Players</p>
              <p className="text-sm text-text-muted">All-time</p>
        </motion.div>

            <motion.div
              whileHover={{ scale: 1.02, y: -2 }}
              className="glass-card text-center p-4"
            >
              <TrophyIcon className="h-12 w-12 mx-auto mb-4 text-accent" />
                              <h3 className="text-2xl font-bold text-white mb-1">{(stats.winRate || 0).toFixed(1)}%</h3>
              <p className="text-lg font-semibold text-text-secondary mb-1">Win Rate</p>
              <p className="text-sm text-text-muted">Average</p>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.02, y: -2 }}
              className="glass-card text-center p-4"
            >
              <EyeIcon className="h-12 w-12 mx-auto mb-4 text-green-400" />
              <h3 className="text-2xl font-bold text-white mb-1">{stats.avgCorrect}x</h3>
              <p className="text-lg font-semibold text-text-secondary mb-1">Average Odds</p>
              <p className="text-sm text-text-muted">Successful slips</p>
            </motion.div>
          </motion.div>
        )}

        {/* Countdown Timer */}
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
          className="glass-card text-center p-6 mb-8"
        >
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-bold text-primary flex items-center gap-2">
              <ClockIcon className="h-6 w-6" />
              {matches && matches.length > 0 ? (
                <>
              Betting Closes In
                  <span className="text-sm font-normal text-text-secondary ml-2">
                    (First match: {matches.sort((a, b) => new Date(a.match_date).getTime() - new Date(b.match_date).getTime())[0]?.home_team} vs {matches.sort((a, b) => new Date(a.match_date).getTime() - new Date(b.match_date).getTime())[0]?.away_team})
                  </span>
                </>
              ) : (
                "Betting Closes In"
              )}
            </h3>
            
            {/* Refresh Button */}
            <button
              onClick={handleManualRefresh}
              disabled={apiCallInProgress}
              className="flex items-center gap-2 px-3 py-2 bg-primary/20 hover:bg-primary/30 text-primary rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {apiCallInProgress ? (
                <FaSpinner className="h-4 w-4 animate-spin" />
              ) : (
                <ArrowPathIcon className="h-4 w-4" />
              )}
              <span className="text-sm font-medium">Refresh</span>
            </button>
          </div>
          {isExpired ? (
            <div className="text-red-400 font-bold text-2xl">
              Betting is closed - first match has started
            </div>
          ) : (
            <div className="flex justify-center gap-4 mb-4">
              <motion.div 
                className="glass-card p-4 min-w-[80px]"
                animate={{ scale: [1, 1.05, 1] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <div className="text-2xl font-bold text-primary">{timeLeft.hours.toString().padStart(2, '0')}</div>
                <div className="text-xs text-text-muted uppercase tracking-wider">Hours</div>
              </motion.div>
              <motion.div 
                className="glass-card p-4 min-w-[80px]"
                animate={{ scale: [1, 1.05, 1] }}
                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}
              >
                <div className="text-2xl font-bold text-primary">{timeLeft.minutes.toString().padStart(2, '0')}</div>
                <div className="text-xs text-text-muted uppercase tracking-wider">Minutes</div>
              </motion.div>
              <motion.div 
                className="glass-card p-4 min-w-[80px]"
                animate={{ scale: [1, 1.05, 1] }}
                transition={{ duration: 2, repeat: Infinity, delay: 1 }}
              >
                <div className="text-2xl font-bold text-primary">{timeLeft.seconds.toString().padStart(2, '0')}</div>
                <div className="text-xs text-text-muted uppercase tracking-wider">Seconds</div>
              </motion.div>
            </div>
          )}
        </motion.div>

        {/* Tab Navigation */}
        <div className="glass-card p-4 md:p-6 mb-8">
          <div className="flex items-center justify-center gap-2 md:gap-4 flex-wrap">
            <button
              onClick={() => setActiveTab("today")}
              className={`px-4 md:px-8 py-2 md:py-3 rounded-button font-semibold transition-all duration-300 flex items-center gap-1 md:gap-2 text-sm md:text-base ${
                activeTab === "today"
                  ? "bg-gradient-primary text-black shadow-lg scale-105"
                  : "text-text-secondary hover:text-text-primary hover:bg-bg-card/50"
              }`}
            >
              <TableCellsIcon className="h-4 w-4 md:h-5 md:w-5" />
              <span className="hidden sm:inline">Matches & Betting</span>
              <span className="sm:hidden">Matches</span>
            </button>
            <button
              onClick={() => setActiveTab("slips")}
              className={`px-4 md:px-8 py-2 md:py-3 rounded-button font-semibold transition-all duration-300 flex items-center gap-1 md:gap-2 text-sm md:text-base relative overflow-hidden ${
                activeTab === "slips"
                  ? "bg-gradient-to-r from-cyan-500/20 to-blue-500/20 text-cyan-300 shadow-lg shadow-cyan-500/25 scale-105 border border-cyan-500/30"
                  : "text-text-secondary hover:text-cyan-300 hover:bg-gradient-to-r hover:from-cyan-500/10 hover:to-blue-500/10 hover:border hover:border-cyan-500/20"
              }`}
            >
              <div className="relative">
                <TrophyIcon className="h-4 w-4 md:h-5 md:w-5" />
                {(() => {
                  const unclaimedPrizes = slips.filter(slip => {
                    const firstPick = slip[0];
                    return firstPick?.isEvaluated && (firstPick?.leaderboardRank ?? 0) <= 5 && !firstPick?.prizeClaimed;
                  }).length;
                  
                  return unclaimedPrizes > 0 ? (
                    <span className="absolute -top-2 -right-2 bg-gradient-to-r from-yellow-500 to-orange-500 text-black text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold animate-pulse-glow">
                      {unclaimedPrizes}
                    </span>
                  ) : null;
                })()}
              </div>
              <span className="hidden sm:inline">My Slips ({slips.length})</span>
              <span className="sm:hidden">Slips ({slips.length})</span>
            </button>
            <button
              onClick={() => setActiveTab("results")}
              className={`px-4 md:px-8 py-2 md:py-3 rounded-button font-semibold transition-all duration-300 flex items-center gap-1 md:gap-2 text-sm md:text-base relative overflow-hidden ${
                activeTab === "results"
                  ? "bg-gradient-to-r from-magenta-500/20 to-violet-500/20 text-magenta-300 shadow-lg shadow-magenta-500/25 scale-105 border border-magenta-500/30"
                  : "text-text-secondary hover:text-magenta-300 hover:bg-gradient-to-r hover:from-magenta-500/10 hover:to-violet-500/10 hover:border hover:border-magenta-500/20"
              }`}
            >
              <DocumentTextIcon className="h-4 w-4 md:h-5 md:w-5" />
              <span className="hidden sm:inline">Match Results</span>
              <span className="sm:hidden">Results</span>
            </button>
            <button
              onClick={() => setActiveTab("stats")}
              className={`px-4 md:px-8 py-2 md:py-3 rounded-button font-semibold transition-all duration-300 flex items-center gap-1 md:gap-2 text-sm md:text-base ${
                activeTab === "stats"
                  ? "bg-gradient-secondary text-black shadow-lg scale-105"
                  : "text-text-secondary hover:text-text-primary hover:bg-bg-card/50"
              }`}
            >
              <ArrowTrendingUpIcon className="h-4 w-4 md:h-5 md:w-5" />
              <span className="hidden sm:inline">Statistics</span>
              <span className="sm:hidden">Stats</span>
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-8">
          <AnimatePresence mode="wait">
            {/* Enhanced View with Real Team Names */}
            <motion.div
              key="enhanced"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="lg:col-span-3"
            >
              <div className="space-y-8">
                {/* Enhanced Matches */}
                <div className="glass-card p-6">
                  <EnhancedMatchDisplay
                    matches={enhancedMatches}
                    title="Today's Matches"
                    showLeague={true}
                    showTime={true}
                  />
                </div>

                {/* Enhanced Slips */}
                <div className="glass-card p-6">
                  <EnhancedSlipDisplay
                    slips={enhancedSlips}
                    title="Recent Slips"
                    showUser={true}
                    showEvaluation={true}
                  />
                </div>

                {/* Enhanced Stats */}
                {enhancedSlipStats && (
                  <div className="glass-card p-6">
                    <h3 className="text-xl font-bold text-white mb-4">Cycle Statistics</h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-primary">
                          {enhancedSlipStats.totalSlips}
                        </div>
                        <div className="text-sm text-text-secondary">Total Slips</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-secondary">
                          {enhancedSlipStats.totalAmount.toFixed(2)} STT
                        </div>
                        <div className="text-sm text-text-secondary">Total Amount</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-accent">
                          {enhancedSlipStats.averageSuccessRate.toFixed(1)}%
                        </div>
                        <div className="text-sm text-text-secondary">Avg Success Rate</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-400">
                          {enhancedSlipStats.winningSlips}
                        </div>
                        <div className="text-sm text-text-secondary">Winning Slips</div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}
